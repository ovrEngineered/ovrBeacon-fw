#
# @author Christopher Armenio
#


######## imports ########


######## public constants ########


######## private constants ########
#const KEY_HW_REV = $8000
const KEY_LIGHT_SNS_ENABLED = $8001
const KEY_TEMP_SNS_ENABLED = $8002
const KEY_ENUM_COLOR_RGB = $8003

const KEY_ACCEL_CTRL = $8004
const KEY_ACCEL_TAP_THRESH = $8005
const KEY_ACCEL_ACT_THRESH = $8006
const KEY_ACCEL_INACT_THRESH = $8007
const KEY_ACCEL_FREEFALL_THRESH = $8008
const KEY_ACCEL_RANGE = $8009
const KEY_ACCEL_LED_COLOR_RGB = $800A

const KEY_SENSE_PERIOD_S = $800B

const DEFAULT_ENUM_COLOR_RGB() = "\xFF\xFF\xFF"
const DEFAULT_ACCEL_THRESH_MAX = 255
const DEFAULT_ACCEL_LED_COLOR_RGB() = "\x00\x00\xFF"
const DEFAULT_SENSE_PERIOD_S = 2


######## public variables ########
export const COLOR_RGB_LEN = 3

export dim PS_IS_LIGHT_ENABLED
export dim PS_IS_TEMP_ENABLED

export dim PS_ENUM_COLOR_RGB(3)

export dim PS_ACCEL_CTRL
export dim PS_ACCEL_TAP_THRESH
export dim PS_ACCEL_ACT_THRESH
export dim PS_ACCEL_INACT_THRESH
export dim PS_ACCEL_RANGE
export dim PS_ACCEL_LED_COLOR_RGB(3)

export dim PS_SENSE_PERIOD_S


######## private variables ########
dim result, value_len
dim value_data(3)


######## public procedures ########
export procedure persistentStore_init1()
   # Note: having (stack?) problems w/ else so broke 'else' statements
   #       into two 'if' statements

   call flash_ps_load(KEY_LIGHT_SNS_ENABLED)(result, value_len, value_data(0:1))
   if( result = 0 ) then
      PS_IS_LIGHT_ENABLED = value_data(0:1)
   end if
   if( result != 0 ) then
      PS_IS_LIGHT_ENABLED = 0
   end if

   call flash_ps_load(KEY_TEMP_SNS_ENABLED)(result, value_len, value_data(0:1))
   if( result = 0 ) then
      PS_IS_TEMP_ENABLED = value_data(0:1)
   end if
   if( result != 0 ) then
      PS_IS_TEMP_ENABLED = 0
   end if

   call flash_ps_load(KEY_ENUM_COLOR_RGB)(result, value_len, value_data(0:COLOR_RGB_LEN))
   if( result = 0 ) then
      PS_ENUM_COLOR_RGB(0:1) = value_data(0:1)
      PS_ENUM_COLOR_RGB(1:1) = value_data(1:1)
      PS_ENUM_COLOR_RGB(2:1) = value_data(2:1)
   end if
   if( result != 0 ) then
      PS_ENUM_COLOR_RGB(0:1) = DEFAULT_ENUM_COLOR_RGB(0:1)
      PS_ENUM_COLOR_RGB(1:1) = DEFAULT_ENUM_COLOR_RGB(1:1)
      PS_ENUM_COLOR_RGB(2:1) = DEFAULT_ENUM_COLOR_RGB(2:1)
   end if

   call flash_ps_load(KEY_ACCEL_CTRL)(result, value_len, value_data(0:1))
   if( result = 0 ) then
      PS_ACCEL_CTRL = value_data(0:1)
   end if
   if( result != 0 ) then
      PS_ACCEL_CTRL = 0
   end if
end


export procedure persistentStore_init2()
   # Note: having (stack?) problems w/ else so broke 'else' statements
   #       into two 'if' statements

   call flash_ps_load(KEY_ACCEL_TAP_THRESH)(result, value_len, value_data(0:1))
   if( result = 0 ) then
      PS_ACCEL_TAP_THRESH = value_data(0:1)
   end if
   if( result != 0 ) then
      PS_ACCEL_TAP_THRESH = DEFAULT_ACCEL_THRESH_MAX
   end if

   call flash_ps_load(KEY_ACCEL_ACT_THRESH)(result, value_len, value_data(0:1))
   if( result = 0 ) then
      PS_ACCEL_ACT_THRESH = value_data(0:1)
   end if
   if( result != 0 ) then
      PS_ACCEL_ACT_THRESH = DEFAULT_ACCEL_THRESH_MAX
   end if

   call flash_ps_load(KEY_ACCEL_INACT_THRESH)(result, value_len, value_data(0:1))
   if( result = 0 ) then
      PS_ACCEL_INACT_THRESH = value_data(0:1)
   end if
   if( result != 0 ) then
      PS_ACCEL_INACT_THRESH = DEFAULT_ACCEL_THRESH_MAX
   end if

   call flash_ps_load(KEY_ACCEL_RANGE)(result, value_len, value_data(0:1))
   if( result = 0 ) then
      PS_ACCEL_RANGE = value_data(0:1)
   end if
   if( result != 0 ) then
      PS_ACCEL_RANGE = 0
   end if

   call flash_ps_load(KEY_ACCEL_LED_COLOR_RGB)(result, value_len, value_data(0:COLOR_RGB_LEN))
   if( result = 0 ) then
      PS_ACCEL_LED_COLOR_RGB(0:1) = value_data(0:1)
      PS_ACCEL_LED_COLOR_RGB(1:1) = value_data(1:1)
      PS_ACCEL_LED_COLOR_RGB(2:1) = value_data(2:1)
   end if
   if( result != 0 ) then
      PS_ACCEL_LED_COLOR_RGB(0:1) = DEFAULT_ACCEL_LED_COLOR_RGB(0:1)
      PS_ACCEL_LED_COLOR_RGB(1:1) = DEFAULT_ACCEL_LED_COLOR_RGB(1:1)
      PS_ACCEL_LED_COLOR_RGB(2:1) = DEFAULT_ACCEL_LED_COLOR_RGB(2:1)
   end if

   call flash_ps_load(KEY_SENSE_PERIOD_S)(result, value_len, value_data(0:2))
   if( result = 0 ) then
      PS_SENSE_PERIOD_S = value_data(0:1) | (value_data(1:1) << 8)
   end if
   if( result != 0 ) then
      PS_SENSE_PERIOD_S = DEFAULT_SENSE_PERIOD_S
   end if
end


export procedure persistentStore_setLightEnabled(isEnabledIn)
   call flash_ps_save(KEY_LIGHT_SNS_ENABLED, 1, isEnabledIn)
   PS_IS_LIGHT_ENABLED = isEnabledIn
end


export procedure persistentStore_setTempEnabled(isEnabledIn)
   call flash_ps_save(KEY_TEMP_SNS_ENABLED, 1, isEnabledIn)
   PS_IS_TEMP_ENABLED = isEnabledIn
end


export procedure persistentStore_setEnumColorRgb(rgbIn())
   call flash_ps_save(KEY_ENUM_COLOR_RGB, COLOR_RGB_LEN, rgbIn(0:COLOR_RGB_LEN))

   PS_ENUM_COLOR_RGB(0:1) = rgbIn(0:1)
   PS_ENUM_COLOR_RGB(1:1) = rgbIn(1:1)
   PS_ENUM_COLOR_RGB(2:1) = rgbIn(2:1)
end


export procedure persistentStore_setAccelControl(ctrlIn)
   call flash_ps_save(KEY_ACCEL_CTRL, 1, ctrlIn)
   PS_ACCEL_CTRL = ctrlIn
end


export procedure persistentStore_setAccelTapThresh(threshIn)
   call flash_ps_save(KEY_ACCEL_TAP_THRESH, 1, threshIn)
   PS_ACCEL_TAP_THRESH = threshIn
end


export procedure persistentStore_setAccelActThresh(threshIn)
   call flash_ps_save(KEY_ACCEL_ACT_THRESH, 1, threshIn)
   PS_ACCEL_ACT_THRESH = threshIn
end


export procedure persistentStore_setAccelInactThresh(threshIn)
   call flash_ps_save(KEY_ACCEL_INACT_THRESH, 1, threshIn)
   PS_ACCEL_INACT_THRESH = threshIn
end


export procedure persistentStore_setAccelRange(rangeIn)
   call flash_ps_save(KEY_ACCEL_RANGE, 1, rangeIn)
   PS_ACCEL_RANGE = rangeIn
end


export procedure persistentStore_setAccelColorRgb(rgbIn())
   call flash_ps_save(KEY_ACCEL_LED_COLOR_RGB, COLOR_RGB_LEN, rgbIn(0:COLOR_RGB_LEN))

   PS_ACCEL_LED_COLOR_RGB(0:1) = rgbIn(0:1)
   PS_ACCEL_LED_COLOR_RGB(1:1) = rgbIn(1:1)
   PS_ACCEL_LED_COLOR_RGB(2:1) = rgbIn(2:1)
end


export procedure persistentStore_setSensePeriod_s(period_sIn)
   call flash_ps_save(KEY_SENSE_PERIOD_S, 2, period_sIn)

   PS_SENSE_PERIOD_S = period_sIn
end


######## private procedures ########


######## system events ########
