#
# @author Christopher Armenio
#


######## imports ########


######## public constants ########


######## private constants ########
const CHARGING_PORT_NUM = 0
const CHARGING_PIN_NUM = 7


######## public variables ########


######## private variables ########
dim result
dim port
dim isCharging
dim wasCharging
dim wasFull


######## public procedures ########
export procedure chargingManager_init()
   wasCharging = 0
   wasFull = 0
   isCharging = 0
   call attributes_write(char_isCharging, 0, 1, isCharging)
end


export procedure chargingManager_update()
   call hardware_io_port_read(CHARGING_PORT_NUM, 1 << CHARGING_PIN_NUM)(result, port, isCharging)
   isCharging = 1 ^ ((isCharging & (1 << CHARGING_PIN_NUM)) >> CHARGING_PIN_NUM)

   call attributes_write(char_isCharging, 0, 1, isCharging)

   if( isCharging ) then
      if( wasCharging = 0 ) then
         # we _were not_ charging, now we are...update our led
         call ovrBeaconAdvertManager_updateChargingStatus(isCharging)
         wasFull = 0
         call ledManager_setIsCharging(1, 0)
      else
         # we were previously charging...see if we've become full
         if( (wasFull = 0) && (battery_vbatt_pcnt100 = 100) ) then
            wasFull = 1
            call ledManager_setIsCharging(1, 1)
         end if
      end if
   end if
   if( (isCharging = 0) & wasCharging ) then
      call ovrBeaconAdvertManager_updateChargingStatus(isCharging)
      call ledManager_setIsCharging(0, 0)
   end if
   wasCharging = isCharging
end


######## private procedures ########


######## system events ########
