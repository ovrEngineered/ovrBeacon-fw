#
# @author Christopher Armenio
#


######## private constants ########


######## private variables ########


######## public procedures ########
export procedure sensorManager_init()
   call hardware_set_soft_timer(PS_SENSE_PERIOD_S * 32768, 0, 0)
end

export procedure sensorManager_setSensePeriod_s(period_sIn)
   # cancel our current timer
   call hardware_set_soft_timer(0, 0, 0)
   # change our sense period
   call persistentStore_setSensePeriod_s(period_sIn)
   # reschedule our timer
   call hardware_set_soft_timer(PS_SENSE_PERIOD_S * 32768, 0, 0)
end


######## system events ########
event hardware_soft_timer(handle)
   # see if this is meant for other timed events first...
   if( handle = LED_TIMERHANDLE_ENUMCOMPLETE ) then
      call ledManager_stopEnumeration()
      return
   end if

   # must be meant for us...call our update functions
   call ltr329_update()
   call adxl345_update()
   call si7050_update()
   call chargingManager_update()
   call battery_update()

   # now update our sensor status
   call attributes_write(char_sensorStatus, 0, 1, (ADXL345_ERROR << 2) | (SI7050_ERROR << 1) | (LTR329_ERROR << 0))
   call ovrBeaconAdvertManager_updateStatus_accelError(ADXL345_ERROR)
   call ovrBeaconAdvertManager_updateStatus_tempError(SI7050_ERROR)
   call ovrBeaconAdvertManager_updateStatus_lightError(LTR329_ERROR)
end


event hardware_adc_result(input, value)
   if( input = ADCNUM_BATT ) then
      call battery_handleAdcRead(value)
   end if
end
